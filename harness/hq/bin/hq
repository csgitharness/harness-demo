#!/bin/bash

# Assign HARNESS_ACCOUNT_ID and HARNESS_API_KEY
if [ -z $HQ_HOME ]; then
  source $HOME/setenv.sh
fi

# Loading defaults - TBD
hq_ids=$(echo $HQ_HOME/config/*.id)
for h_id in $h_ids; do
  source $HQ_HOME/config/$h_id
done

HARNESS_URL='https://app.harness.io/gateway/api/graphql?accountId='$HARNESS_ACCOUNT_ID 

# Core function to invoke the Harness API
fn_run_query () {
   curl -s \
        -H 'x-api-key: '$HARNESS_API_KEY \
        -X POST \
        -H 'Content-Type: application/json' \
        --data @- \
        $HARNESS_URL
}

fn_create_query () {
cat <<_EOF_ | sed "/QUERY/r $1" | sed -e "/QUERY/d" 
{"query":"
QUERY
${QUOTES}
}
_EOF_
}

fn_sub_query (){
sed -e "s/VAR1/$1/" \
    -e "s/VAR2/$2/" \
    -e "s/VAR3/$3/"
}

if [ $# -eq 0 ]; then
  echo "Usage: hq <module/query.hql> VAR1 VAR2 VAR3..."
  exit 0
fi


QUERY_FILE=$1

# Check whether to return only ID
echo $QUERY_FILE | grep -q "id"
RETURN_ID=$?

if [ ! -f $QUERY_FILE ]; then
   QUERY_FILE=${HQ_HOME}/lib/$1
fi

shift;


QUOTES='"'
grep -q "mutation" $QUERY_FILE
if [ $? -eq 0 ]; then
  QUOTES=''
fi


# DEBUG
#fn_create_query $QUERY_FILE | fn_sub_query "$@" 


if [ $RETURN_ID -eq 0 ]; then
  RESPONSE=$(fn_create_query $QUERY_FILE | fn_sub_query "$@" | fn_run_query)
  echo ${RESPONSE} | sed -e "s/^.*id...//" -e "s/....\$//"
  exit 0
fi

# RETURN ALL
fn_create_query $QUERY_FILE | fn_sub_query "$@" | fn_run_query


